var allFeeds=[{name:"Udacity Blog",url:"http://blog.udacity.com/feed"},{name:"CSS Tricks",url:"http://feeds.feedburner.com/CssTricks"},{name:"HTML5 Rocks",url:"http://feeds.feedburner.com/html5rocks"},{name:"Linear Digressions",url:"http://feeds.feedburner.com/udacity-linear-digressions"}];function init(){loadFeed(0)}let entriesLen,entries;function loadFeed(e,n){var t=allFeeds[e].url,i=allFeeds[e].name;$.ajax({type:"POST",url:"https://rsstojson.udacity.com/parseFeed",data:JSON.stringify({url:t}),contentType:"application/json",success:function(e,t){var a=$(".feed"),d=$(".header-title"),s=Handlebars.compile($(".tpl-entry").html());entries=e.feed.entries,entriesLen=entries.length,d.html(i),a.empty(),entries.forEach(function(e){a.append(s(e))}),n&&n()},error:function(e,t,i){n&&n()},dataType:"json"})}google.setOnLoadCallback(init),$(function(){$(".feed");var e=$(".feed-list"),n=Handlebars.compile($(".tpl-feed-list-item").html()),t=0,i=$(".menu-icon-link");allFeeds.forEach(function(i){i.id=t,e.append(n(i)),t++}),e.on("click","a",function(){var e=$(this);return $("body").addClass("menu-hidden"),loadFeed(e.data("id")),!1}),i.on("click",function(){$("body").toggleClass("menu-hidden")})}());
//# sourceMappingURL=data:application/json;charset=utf8;base64,
